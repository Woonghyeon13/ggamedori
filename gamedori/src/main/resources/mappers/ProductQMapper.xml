<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="game.dori.mapper.productQMapper">
	
	<!-- 관리자페이지 상품문의 리스트 출력 -->
	<select resultType="pqlistVO" id="pqlist">
		select * 
			from
				product_q_tb pq,
				member_tb m,
				product_tb p
			where
				pq.product_tb_idx = p.prod_idx
			and 
				pq.member_tb_idx = m.member_idx 
			order by prod_q_idx desc
	</select>	
	
	<!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	 
	<!-- 상품 문의 사항 글 번호를 받아와 그 해당하는 글을 선택하는 쿼리문 -->
	<select parameterType="product_Q_VO" resultType="product_Q_VO" id="prod_select">
		SELECT * 
			FROM PRODUCT_Q_TB 
			WHERE prod_q_idx = #{prod_q_idx} 
	</select>
	
	<!--  마이페이지 prod_list가 역순으로 출력 -->
	<select id="prod_selectD" resultType="product_Q_VO" parameterType="int">
		SELECT *
			FROM PRODUCT_Q_TB
			WHERE MEMBER_TB_IDX = #{MEMBER_TB_IDX}
			order by prod_q_idx desc
	</select>
	
	<!--  상품 문의사항 selectall QA_TB 에있는 모든데이터를 선택해서 저장 -->
	<select id="prod_selectAll" resultType="product_Q_VO" parameterType="map">
	    SELECT * 
		    FROM PRODUCT_Q_TB
		    ORDER BY prod_q_idx DESC
		    LIMIT #{limit} OFFSET #{start}
	</select>  
	
	<!-- 상품 문의사항 페이징 처리를 위한 QA_TB -->
	<select id="prod_countAll" resultType="int">
		SELECT COUNT(*) FROM PRODUCT_Q_TB
	</select>
	
	<!-- 상품 문의사항 글 등록 -->
	<insert parameterType="product_Q_VO" id="prod_insert">
		INSERT INTO 
			PRODUCT_Q_TB (
				MEMBER_TB_IDX, 
				PROD_Q_TITLE, 
				PROD_Q_CONTENTS, 
				PROD_Q_WRITER
			)VALUES(
				#{member_tb_idx},
				#{prod_q_title},
				#{prod_q_contents},
				(SELECT member_name FROM member_tb WHERE member_idx = #{member_tb_idx})
			); 
	</insert>
	
	<!-- 상품 문의사항 글 삭제 -->
	<delete id="prod_delete" parameterType="int">
		delete from PRODUCT_Q_TB where prod_q_idx = #{prod_q_idx}
	</delete>

	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	
	<!-- 상품 문의사항 글 검색 -->
	<select id="prod_search" resultType="product_Q_VO" parameterType="map">
	  SELECT * FROM PRODUCT_Q_TB
	  <where>
	    <choose>
	      <when test="searchOption == 'name'">
	        <if test="searchText != null and searchText != ''">
	          and prod_q_title like CONCAT('%', #{searchText}, '%')
	        </if>
	      </when>
	      <when test="searchOption == 'content'">
	        <if test="searchText != null and searchText != ''">
	          AND (prod_q_title LIKE CONCAT('%', #{searchText}, '%') OR prod_q_contents LIKE CONCAT('%', #{searchText}, '%'))
	        </if>
	      </when>
	     <!--  <otherwise>
	        <if test="searchText != null and searchText != ''">
	          AND (prod_q_writer LIKE CONCAT('%', #{searchText}, '%') OR prod_q_title LIKE CONCAT('%', #{searchText}, '%') OR prod_q_contents LIKE CONCAT('%', #{searchText}, '%'))
	        </if>
	      </otherwise> -->
	    </choose>
	  </where>
	  ORDER BY prod_q_idx DESC
	  LIMIT #{start}, #{limit}
	</select>
	
	<!--  상품 문의사항 검색된 쿼리의 갯수도 얻어오기위해 사용 -->
	<select id="prod_countSearchResults" resultType="int" parameterType="map">
		  SELECT COUNT(*) FROM PRODUCT_Q_TB
		  <where>
		    <choose>
		      <when test="searchOption == 'name'">
		        <if test="searchText != null and searchText != ''">
		          prod_q_title like CONCAT('%', #{searchText}, '%')
		        </if>
		      </when>
		      <when test="searchOption == 'content'">
		        <if test="searchText != null and searchText != ''">
		          (prod_q_title LIKE CONCAT('%', #{searchText}, '%') OR prod_q_contents LIKE CONCAT('%', #{searchText}, '%'))
		        </if>
		      </when>
		      <otherwise>
		        <if test="searchText != null and searchText != ''">
		          (prod_q_writer LIKE CONCAT('%', #{searchText}, '%') OR prod_q_title LIKE CONCAT('%', #{searchText}, '%') OR prod_q_contents LIKE CONCAT('%', #{searchText}, '%'))
		        </if>
		      </otherwise>
		    </choose>
		  </where>
	</select>	
	
	<!-- 상품문의 답변 -->
	<update parameterType="pqlistVO" id="pqAnswer">
		update 
			product_q_tb
		set
			prod_q_reply = #{prod_q_reply},
			prod_q_yn = 1
		where
			prod_q_idx = #{prod_q_idx}
	</update>
	
	<!-- 마이페이지 -상품문의 리스트 출력 -->
	<select id="selectQAList" resultType="product_Q_VO" parameterType="int">
		select * 
			from
				product_q_tb pq,
				member_tb m,
				product_tb p
			where
				pq.product_tb_idx = p.prod_idx
			and 
				pq.member_tb_idx = #{MEMBER_IDX}
			order by prod_q_idx desc
	</select>
	

	<!-- int 타입의 매개변수 member_idx 값을 받아서 칼럼 전체의 값을 p 객체로 형태로 반환 -->
	
	<!-- 상품문의 작성 -->
	<insert id="prodQinsert" parameterType="product_Q_VO">
		insert into 
			product_q_tb (
				product_tb_idx, 
				member_tb_idx, 
				prod_q_title, 
				prod_q_contents, 
				prod_q_secret )
		 	values (
		 		 #{product_tb_idx}, 
		 		 #{member_tb_idx}, 
		 		 #{prod_q_title}, 
		 		 #{prod_q_contents}, 
		 		 #{prod_q_secret} 
		 	)
	</insert>
	
	<!-- 상품문의목록 역순으로 출력하게 변경 -->
	<select id="prodQlist" resultType="pqlistVO" parameterType="int">
		SELECT *
		FROM product_q_tb q, member_tb m
		WHERE q.member_tb_idx = m.member_idx AND product_tb_idx = #{prod_idx}
		ORDER BY q.prod_q_idx DESC;
	</select>
	
	<!-- 상품문의목록카운트 -->
	<select id="prodQlistCnt" resultType="int" parameterType="int">
		select count(*)
		 from product_q_tb q, member_tb m
		  where q.member_tb_idx = m.member_idx and product_tb_idx = #{prod_idx}
	</select>

</mapper>